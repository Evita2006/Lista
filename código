import math_operations as mo

def main():
    # Recursos disponibles
    wood, total_wood =mo.pedir_recursos("madera")
    stone, total_stone = mo.pedir_recursos("piedra")
    money, total_money = mo.pedir_recursos("dinero")

    # Ordenar recursos
    sorted_wood = mo.sort_array(wood)
    sorted_stone = mo.sort_array(stone)
    sorted_money = mo.sort_array(money)

    # Sumar recursos
    total_wood = mo.sum_elem_array(sorted_wood)
    total_stone = mo.sum_elem_array(sorted_stone)
    total_money = mo.sum_elem_array(sorted_money)

    print(f"Recursos totales -> Wood: {total_wood}, Stone: {total_stone}, Money: {total_money}")

    # Matrices de costes unitarios
    costes = {
        "casas": [[10, 5], [15, 10]],
        "escuelas": [[20, 25], [10, 30]],
        "hospitales": [[50, 40], [30, 20]],
        "parques": [[5, 5], [5, 5]]
    }

    # Subvención aplicada a todas las construcciones
    subvencion = [[5, 5], [5, 5]]

    # Pedir al usuario cuántas construcciones quiere
    cantidades = {}
    for construccion in costes:
        while True:
            try:
                cantidad = int(input(f"¿Cuántas {construccion} quieres construir? "))
                if cantidad < 0:
                    raise ValueError
                cantidades[construccion] = cantidad
                break
            except ValueError:
                print("Por favor, ingresa un número entero válido (>= 0).")

    print("\n=== Resumen de costes con subvención aplicada ===\n")
    for construccion, coste_unitario in costes.items():
        if cantidades[construccion] == 0:
            continue  # No mostrar construcciones que no se van a construir
        coste_con_subvencion = mo.aplicar_subvencion(coste_unitario, subvencion)
        coste_total = mo.calcular_coste_total(coste_con_subvencion, cantidades[construccion])
        print(f"{construccion.capitalize()} (Cantidad: {cantidades[construccion]}): {coste_total}")

    print("\nSimulación completada ✅")

main()
